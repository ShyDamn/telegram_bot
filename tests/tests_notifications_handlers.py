import pytest
from unittest.mock import MagicMock, AsyncMock
from aiogram import types
from bot.handlers.notifications import router
from database.redis_client import RedisClient

@pytest.fixture
def redis_client():
    return MagicMock(spec=RedisClient)

@pytest.fixture
def message():
    msg = MagicMock(spec=types.Message)
    msg.from_user = MagicMock()
    msg.answer = AsyncMock()
    return msg

@pytest.mark.asyncio
async def test_check_status_active(redis_client, message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏"""
    user_id = 12345
    message.from_user.id = user_id
    redis_client.get_user.return_value = {'is_active': '1'}

    await router.message.handlers[0].callback(message, redis_client=redis_client)

    message.answer.assert_called_once()
    assert 'üìä –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è' in message.answer.call_args[0][0]
    assert '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_check_status_inactive(redis_client, message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏"""
    user_id = 12345
    message.from_user.id = user_id
    redis_client.get_user.return_value = {'is_active': '0'}

    await router.message.handlers[0].callback(message, redis_client=redis_client)

    message.answer.assert_called_once()
    assert 'üìä –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è' in message.answer.call_args[0][0]
    assert '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ' in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_check_status_unregistered(redis_client, message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = 12345
    message.from_user.id = user_id
    redis_client.get_user.return_value = None

    await router.message.handlers[0].callback(message, redis_client=redis_client)

    message.answer.assert_called_once()
    assert '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_list_products_with_products(redis_client, message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /list —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    user_id = 12345
    message.from_user.id = user_id
    products = [
        {'title': 'Product 1', 'price': 1000.0, 'targetPrice': 950.0},
        {'title': 'Product 2', 'price': 2000.0, 'targetPrice': 1800.0}
    ]
    redis_client.get_products.return_value = products

    await router.message.handlers[1].callback(message, redis_client=redis_client)

    message.answer.assert_called_once()
    assert 'üì¶ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã' in message.answer.call_args[0][0]
    assert 'üõçÔ∏è Product 1' in message.answer.call_args[0][0]
    assert 'üõçÔ∏è Product 2' in message.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_list_products_no_products(redis_client, message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /list –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = 12345
    message.from_user.id = user_id
    redis_client.get_products.return_value = []

    await router.message.handlers[1].callback(message, redis_client=redis_client)

    message.answer.assert_called_once()
    assert '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤' in message.answer.call_args[0][0]
